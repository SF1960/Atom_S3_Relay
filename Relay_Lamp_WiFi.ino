#include "arduino_secrets.h"
/* 
Sketch generated by the Arduino IoT Cloud Thing "Untitled"
https://create.arduino.cc/cloud/things/6cde6503-fff6-4349-956d-8c245b12d16a 

Arduino IoT Cloud Variables description

The following variables are automatically generated and updated when changes are made to the Thing

int screenBrightness;
int pushButton;
bool relayOne;
bool relayTwo;

Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
which are called when their values are changed from the Dashboard.
These functions are generated with the Thing and added at the end of this sketch.
*/

/**************************************************************************************
* Description:  Arduino CLoud control of M5 relay unit using the Atom S3
* Sketch:       Relay_Control_WiFi.ino
* Version:      1.0
* Version Desc: Original Version. Using WiFi Manager to connect to any network was too big after library chnages
*               See Relay_Control_jan30a.ino for orginal sketch
*               This version just uses WiFi.h to connect
*               Screen on/off via relayTwo cloud variable
*               Added a restart timer if network disconnected
*               Forced the cloud variables ar device start
*               2025-02-12 Added a screen brightness cloud variable to change the device's screen brightness
* Board:        Atom S3
* Author:       Steve Fuller
* Website:      https://github.com/SF1960/Atom_S3_Relay.git
* Comments      
***************************************************************************************/
//Arduino Libraries
#include <WiFi.h>
#include <M5AtomS3.h>

//Local libraries
#include "WiFiHelper.h"
#include "thingProperties.h"
#include "atomHelper.h"
#include "relayHelper.h"

unsigned long Reconnect = 1000 * 60 * 2; // 2 minute delay before restart
unsigned long PreviousRestartMillis = 0;

bool screen = true;                      // screen on variable

void setup() {

  Serial.begin(115200);                  // Initialize serial and wait for port to open:
  delay(1500); 

  atom::setup();                         // start the AtomS3 and obtain screen width and height
  atom::connecting();                    // display connecting information

  bool connected = wifi::connect();      // use WiFi.h library to connect to an available WiFi network
 
  initProperties();                      // Defined in thingProperties.h

  ArduinoCloud.begin(ArduinoIoTPreferredConnection);   // Connect to Arduino IoT Cloud
  
  setDebugMessageLevel(2);               // Arduino Library Debug Message Level
  ArduinoCloud.printDebugInfo();         // print debug messages

  atom::defaultScreen();                 // show the default screen
  relay::setup();                        // intialise the relay module

}
 
void loop() {

  ArduinoCloud.update();                  // update the cloud every loop of the code

  /*
  Code to display one of two screens
  1. A connected screen
  2. A disconnected screen
  */
  // show the ~ symbol on the display when connected to Arduino
  if(ArduinoCloud.connected()){

    AtomS3.Lcd.setTextSize(2);
    AtomS3.Lcd.setTextColor(CYAN);
    AtomS3.Lcd.drawString("~", 13, 57, 2);
    AtomS3.Lcd.drawString("~", 100, 57, 2);

  } else {

    // overwrite the ~ symbol with black when NOT connected to Arduino
    AtomS3.Lcd.setTextSize(2);
    AtomS3.Lcd.setTextColor(BLACK);
    AtomS3.Lcd.drawString("~", 13, 57, 2);
    AtomS3.Lcd.drawString("~", 100, 57, 2);
    atom::screenOn();                    // force display ON when not connected to Arduino

    /* 
    * If not connected to Arduino then wait for Reconnect minutes
    * and restart the device and attempt to connect again
    */
    unsigned long CurrentRestartMillis = millis();
    if (CurrentRestartMillis - PreviousRestartMillis >= Reconnect) {

      PreviousRestartMillis = CurrentRestartMillis;
      ESP.restart();

    }

  }

  /*
  Read the state of the pushbutton
  When the screen button is released
  toggle the relay state
  */
  AtomS3.update();
  if (AtomS3.BtnA.wasReleased()) {
    relay::latchRelay();
  }
  
}

// function to toggle the relay. Called by Arduino Cloud Dashboard/Thing
void onRelayOneChange()  {
  relay::latchRelay();                  
}

// turn on and off the screen. Called by Arduino Cloud Dashboard/Thing
void onRelayTwoChange()  {

  if (screen == true){
    atom::screenOFF();
    screen = false;
  } else {
    atom::screenOn();
    screen = true;
  }

}

/*
Change the screen brightness. Called by Arduino Cloud Dashboard/Thing
Turn on the screen
Set the brightness
*/
void onScreenBrightnessChange() {
  screen = true;
  atom::screenOn();
  atom::brightness();
}



